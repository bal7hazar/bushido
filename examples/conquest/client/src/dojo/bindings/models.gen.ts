
// Generated by dojo-bindgen on Fri, 4 Oct 2024 17:05:10 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `bushido::models::index::Achievement` struct
export interface Achievement {
    world_id: BigInt;
    namespace: BigInt;
    id: BigInt;
    points: Number;
    whitelisted: Boolean;
    
}
export const AchievementDefinition = {
    world_id: RecsType.BigInt,
    namespace: RecsType.BigInt,
    id: RecsType.BigInt,
    points: RecsType.Number,
    whitelisted: RecsType.Boolean,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};


// Type definition for `bushido::events::index::AchievementCompletion` struct
export interface AchievementCompletion {
    world_id: BigInt;
    namespace: BigInt;
    id: BigInt;
    player_id: BigInt;
    progress: Number;
    time: number;
    
}
export const AchievementCompletionDefinition = {
    world_id: RecsType.BigInt,
    namespace: RecsType.BigInt,
    id: RecsType.BigInt,
    player_id: RecsType.BigInt,
    progress: RecsType.Number,
    time: RecsType.Number,
    
};


// Type definition for `bushido::events::index::AchievementCreation` struct
export interface AchievementCreation {
    world_id: BigInt;
    namespace: BigInt;
    id: BigInt;
    points: Number;
    title: String;
    description: String;
    image_uri: String;
    time: number;
    
}
export const AchievementCreationDefinition = {
    world_id: RecsType.BigInt,
    namespace: RecsType.BigInt,
    id: RecsType.BigInt,
    points: RecsType.Number,
    title: RecsType.String,
    description: RecsType.String,
    image_uri: RecsType.String,
    time: RecsType.Number,
    
};


// Type definition for `bushido::models::index::Game` struct
export interface Game {
    world_id: BigInt;
    namespace: BigInt;
    total_points: Number;
    name: String;
    description: String;
    whitelisted: Boolean;
    torii_url: String;
    image_uri: String;
    
}
export const GameDefinition = {
    world_id: RecsType.BigInt,
    namespace: RecsType.BigInt,
    total_points: RecsType.Number,
    name: RecsType.String,
    description: RecsType.String,
    whitelisted: RecsType.Boolean,
    torii_url: RecsType.String,
    image_uri: RecsType.String,
    
};


// Type definition for `conquest::models::index::Player` struct
export interface Player {
    id: BigInt;
    name: BigInt;
    
}
export const PlayerDefinition = {
    id: RecsType.BigInt,
    name: RecsType.BigInt,
    
};


// Type definition for `conquest::models::index::Tile` struct
export interface Tile {
    id: Number;
    player_id: BigInt;
    time: Number;
    
}
export const TileDefinition = {
    id: RecsType.Number,
    player_id: RecsType.BigInt,
    time: RecsType.Number,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `bushido::models::index::Achievement` model
        Achievement: (() => {
            return defineComponent(
                world,
                {
                    world_id: RecsType.BigInt,
                    namespace: RecsType.BigInt,
                    id: RecsType.BigInt,
                    points: RecsType.Number,
                    whitelisted: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "conquest",
                        name: "Achievement",
                        types: ["felt252", "felt252", "felt252", "u16", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `bushido::events::index::AchievementCompletion` model
        AchievementCompletion: (() => {
            return defineComponent(
                world,
                {
                    world_id: RecsType.BigInt,
                    namespace: RecsType.BigInt,
                    id: RecsType.BigInt,
                    player_id: RecsType.BigInt,
                    progress: RecsType.Number,
                    time: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "conquest",
                        name: "AchievementCompletion",
                        types: ["felt252", "felt252", "felt252", "felt252", "u8", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `bushido::events::index::AchievementCreation` model
        AchievementCreation: (() => {
            return defineComponent(
                world,
                {
                    world_id: RecsType.BigInt,
                    namespace: RecsType.BigInt,
                    id: RecsType.BigInt,
                    points: RecsType.Number,
                    title: RecsType.String,
                    description: RecsType.String,
                    image_uri: RecsType.String,
                    time: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "conquest",
                        name: "AchievementCreation",
                        types: ["felt252", "felt252", "felt252", "u16", "u64"],
                        customTypes: ["ByteArray", "ByteArray", "ByteArray"],
                    },
                }
            );
        })(),

        // Model definition for `bushido::models::index::Game` model
        Game: (() => {
            return defineComponent(
                world,
                {
                    world_id: RecsType.BigInt,
                    namespace: RecsType.BigInt,
                    total_points: RecsType.Number,
                    name: RecsType.String,
                    description: RecsType.String,
                    whitelisted: RecsType.Boolean,
                    torii_url: RecsType.String,
                    image_uri: RecsType.String,
                },
                {
                    metadata: {
                        namespace: "conquest",
                        name: "Game",
                        types: ["felt252", "felt252", "u16", "bool"],
                        customTypes: ["ByteArray", "ByteArray", "ByteArray", "ByteArray"],
                    },
                }
            );
        })(),

        // Model definition for `conquest::models::index::Player` model
        Player: (() => {
            return defineComponent(
                world,
                {
                    id: RecsType.BigInt,
                    name: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "conquest",
                        name: "Player",
                        types: ["felt252", "felt252"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `conquest::models::index::Tile` model
        Tile: (() => {
            return defineComponent(
                world,
                {
                    id: RecsType.Number,
                    player_id: RecsType.BigInt,
                    time: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "conquest",
                        name: "Tile",
                        types: ["u32", "felt252", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),
    };
}
