
// Generated by dojo-bindgen on Thu, 3 Oct 2024 15:15:39 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray, } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface RegisterGame {
  account: Account;
  world_id: bigint;
  namespace: string;
  name: string;
  description: string;
  torii_url: string;
  image_uri: string;
}

export interface UpdateGame {
    account: Account;
    world_id: bigint;
    namespace: string;
    name: string;
    description: string;
    torii_url: string;
    image_uri: string;
}

export interface RegisterAchievement {
    account: Account;
    world_id: bigint;
    namespace: string;
    achievement_id: string;
    points: number;
}

export interface UpdateAchievement {
    account: Account;
    world_id: bigint;
    namespace: string;
    achievement_id: string;
    points: number;
}

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `game_center-Actions` contract
    function Actions() {
        const contract_name = "Actions";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "game_center"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

    
        // Call the `register_game` system with the specified Account and calldata
        const register_game = async (props: RegisterGame) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "register_game",
                        calldata: [props.world_id,
                props.namespace,
                byteArray.byteArrayFromString(props.name),
                byteArray.byteArrayFromString(props.description),
                byteArray.byteArrayFromString(props.torii_url),
                byteArray.byteArrayFromString(props.image_uri)],
                    },
                    "game_center"
                );
            } catch (error) {
                console.error("Error executing register_game:", error);
                throw error;
            }
        };
            

    
        // Call the `update_game` system with the specified Account and calldata
        const update_game = async (props: UpdateGame) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "update_game",
                        calldata: [props.world_id,
                props.namespace,
                byteArray.byteArrayFromString(props.name),
                byteArray.byteArrayFromString(props.description),
                byteArray.byteArrayFromString(props.torii_url),
                byteArray.byteArrayFromString(props.image_uri)],
                    },
                    "game_center"
                );
            } catch (error) {
                console.error("Error executing update_game:", error);
                throw error;
            }
        };
            

    
        // Call the `register_achievement` system with the specified Account and calldata
        const register_achievement = async (props: RegisterAchievement) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "register_achievement",
                        calldata: [props.world_id,
                props.namespace,
                props.achievement_id,
                props.points],
                    },
                    "game_center"
                );
            } catch (error) {
                console.error("Error executing register_achievement:", error);
                throw error;
            }
        };
            

    
        // Call the `update_achievement` system with the specified Account and calldata
        const update_achievement = async (props: UpdateAchievement) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "update_achievement",
                        calldata: [props.world_id,
                props.namespace,
                props.achievement_id,
                props.points],
                    },
                    "game_center"
                );
            } catch (error) {
                console.error("Error executing update_achievement:", error);
                throw error;
            }
        };
            

        return {
            world, register_game, update_game, register_achievement, update_achievement
        };
    }

    return {
        Actions: Actions()
    };
}
